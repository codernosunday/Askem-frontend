{"ast":null,"code":"var __jsx = React.createElement;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nimport React, { useEffect, useRef } from 'react';\nimport cn from 'classnames';\nimport { Search } from '../icons';\nimport styles from './search-input.module.css';\nconst SearchInput = _ref => {\n  let {\n      fullWidth,\n      autoFocus,\n      marginLeft = true,\n      isLoading = false,\n      className\n    } = _ref,\n    props = _objectWithoutProperties(_ref, [\"fullWidth\", \"autoFocus\", \"marginLeft\", \"isLoading\", \"className\"]);\n  const ref = useRef(null);\n  useEffect(() => {\n    if (autoFocus) {\n      ref.current.focus();\n    }\n  }, [ref]);\n  return __jsx(\"div\", {\n    className: cn(styles.container, fullWidth && styles.fullWidth, marginLeft && styles.ml24, isLoading && styles.isLoading)\n  }, __jsx(\"input\", _extends({\n    ref: ref,\n    className: cn(styles.input, isLoading && styles.paddingRight, className)\n  }, props)), __jsx(Search, {\n    className: styles.search\n  }));\n};\nexport default SearchInput;","map":null,"metadata":{},"sourceType":"module"}