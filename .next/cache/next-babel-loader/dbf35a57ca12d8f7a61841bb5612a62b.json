{"ast":null,"code":"var __jsx = React.createElement;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nimport React, { useContext } from 'react';\nimport cn from 'classnames';\nimport ModalContext from '../../store/modal';\nimport { Close } from '../icons';\nimport Button from '../button';\nimport styles from './modal.module.css';\nconst Modal = _ref => {\n  let {\n      children,\n      className\n    } = _ref,\n    props = _objectWithoutProperties(_ref, [\"children\", \"className\"]);\n  const {\n    ref,\n    setIsComponentVisible\n  } = useContext(ModalContext);\n  return __jsx(React.Fragment, null, __jsx(\"div\", _extends({\n    className: cn(styles.modal, className)\n  }, props), __jsx(\"div\", {\n    ref: ref,\n    className: styles.modalDialog\n  }, __jsx(Button, {\n    className: styles.closeButton,\n    onClick: () => setIsComponentVisible(isOpen => !isOpen)\n  }, __jsx(Close, null)), children)));\n};\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}