{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { GroupAuthContext } from '../../../store/groupauth';\nimport { publicFetch } from '../../../util/fetcher';\nimport { FetchContext } from '../../../store/fetch';\nimport QuestionWrapper from '../../question/question-wrapper';\nimport QuestionStats from '../../question/question-stats';\nimport QuestionSummary from '../../question/question-summary';\nimport ButtonGroup from '../../button-group';\nimport { Spinner } from '../../icons';\nimport styles from './waitList.module.css';\nconst AdminFormGroupQuestion = () => {\n  const router = useRouter();\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Votes');\n  const {\n    valueGroup\n  } = useContext(GroupAuthContext);\n  const fetchQuestion = async () => {\n    const {\n      data\n    } = await publicFetch.get(`/group/${valueGroup.inGroup}/waitlist`);\n    setQuestions(data);\n  };\n  const handleDelete = async questionId => {\n    const res = window.confirm('Unapprove this post?');\n    if (res) {\n      await authAxios.delete(`/question/groupadmin/${questionId}`);\n      await fetchQuestion();\n    }\n  };\n  const handleAccept = async questionId => {\n    await authAxios.post(`/group/acceptquestion/${valueGroup.inGroup}/${questionId}`);\n    await fetchQuestion();\n  };\n  useEffect(() => {\n    try {\n      fetchQuestion();\n      const fetchQuestionByTag = async () => {\n        const {\n          data\n        } = await publicFetch.get(`/questions/${router.query.tag}`);\n        setQuestions(data);\n      };\n      if (router.query.tag) {\n        fetchQuestionByTag();\n      } else {\n        fetchQuestion();\n      }\n    } catch (error) {}\n  }, [router.query.tag]);\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n      default:\n        break;\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(({\n    id,\n    votes,\n    answers,\n    views,\n    title,\n    text,\n    tags,\n    author,\n    created\n  }) => __jsx(QuestionWrapper, {\n    key: id\n  }, __jsx(QuestionStats, {\n    voteCount: votes.length,\n    answerCount: answers.length,\n    view: views\n  }), __jsx(QuestionSummary, {\n    id: id,\n    title: title,\n    tags: tags,\n    author: author,\n    createdTime: created\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: text\n    }\n  })), __jsx(\"div\", {\n    className: styles.btncontainer\n  }, __jsx(\"button\", {\n    className: styles.btnWaitList,\n    onClick: () => handleAccept(id)\n  }, \"accept\"), __jsx(\"button\", {\n    className: styles.btnWaitList,\n    onClick: () => handleDelete(id)\n  }, \"delete\")))));\n};\nexport default AdminFormGroupQuestion;","map":null,"metadata":{},"sourceType":"module"}