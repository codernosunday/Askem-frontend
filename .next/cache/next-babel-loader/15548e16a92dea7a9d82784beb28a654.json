{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport SearchInput from '../../components/search-input';\nimport GroupList from '../../components/group-list';\nimport GroupItem from '../../components/group-list/group-items';\nimport { Spinner } from '../../components/icons';\nfunction Groups() {\n  const {\n    0: searchTerm,\n    1: setSearchTerm\n  } = useState(null);\n  const {\n    0: groups,\n    1: setGroups\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (searchTerm === null) {\n      const fetchGroup = async () => {\n        const {\n          data\n        } = await publicFetch.get('/groups');\n        setGroups(data);\n      };\n      fetchGroup();\n    } else {\n      const delayDebounceFn = setTimeout(async () => {\n        setLoading(true);\n        const {\n          data\n        } = await publicFetch.get(searchTerm ? `/groups/${searchTerm}` : `/groups`);\n        setGroups(data);\n        setLoading(false);\n      }, 500);\n      return () => clearTimeout(delayDebounceFn);\n    }\n  }, [searchTerm]);\n  return __jsx(Layout, {\n    extra: false\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Groups - Askem\")), __jsx(PageTitle, {\n    title: \"Groups\",\n    borderBottom: false,\n    group: true\n  }), __jsx(SearchInput, {\n    placeholder: \"Search Group\",\n    isLoading: loading,\n    autoFocus: true,\n    autoComplete: \"off\",\n    type: \"text\",\n    onChange: e => setSearchTerm(e.target.value)\n  }), !groups && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), groups && __jsx(React.Fragment, null, __jsx(GroupList, null, groups === null || groups === void 0 ? void 0 : groups.map(({\n    name,\n    avartar,\n    created,\n    id\n  }) => __jsx(GroupItem, {\n    key: id,\n    name: name,\n    avatar: avartar,\n    created: created\n  }))), groups.length == 0 && __jsx(\"p\", {\n    className: \"not-found\"\n  }, \"No group matched.\")));\n}\nexport default Groups;","map":null,"metadata":{},"sourceType":"module"}