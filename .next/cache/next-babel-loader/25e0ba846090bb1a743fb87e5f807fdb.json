{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { GroupAuthContext } from '../../store/groupauth';\nimport { publicFetch } from '../../util/fetcher';\nimport PageTitle from '../../components/page-title';\nimport Layout from '../../components/layout';\nimport { FetchContext } from '../../store/fetch';\nimport QuestionWrapper from '../../components/question/question-wrapper';\nimport QuestionStats from '../../components/question/question-stats';\nimport QuestionSummary from '../../components/question/question-summary';\nimport ButtonGroup from '../../components/button-group';\nimport { Spinner } from '../../components/icons';\nimport styles from './stylegroup.module.css';\nexport async function getServerSideProps(context) {\n  const {\n    group\n  } = context.params;\n  return {\n    props: {\n      name: group\n    }\n  };\n}\nconst GroupDetail = ({\n  name\n}) => {\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const router = useRouter();\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Votes');\n  const {\n    0: btnText,\n    1: setBtnText\n  } = useState('Join group');\n  const {\n    valueGroup,\n    setValueGroup\n  } = useContext(GroupAuthContext);\n  const {\n    0: group,\n    1: setGroup\n  } = useState(true);\n  useEffect(() => {\n    if (name) {\n      localStorage.setItem('groupName', name);\n    } else {\n      const storedName = localStorage.getItem('groupName');\n      if (storedName) {\n        name = storedName;\n      }\n    }\n  }, [name]);\n  const handleJoin = async () => {\n    try {\n      await authAxios.post(`/group/${valueGroup.inGroup}/joingroup`);\n      setBtnText('Requested');\n    } catch (error) {\n      console.error(\"Error joining group:\", error);\n    }\n  };\n  useEffect(() => {\n    const fetchGroupData = async () => {\n      try {\n        const {\n          data\n        } = await authAxios.get(`/group/${name}`);\n        setValueGroup(data);\n        if (data.isWaiting && !data.isAdmin && !data.isAuthor) {\n          setBtnText('Requested');\n          setGroup(true);\n        }\n        if (data.isAdmin || data.isAuthor || data.isUser) {\n          setGroup(false);\n          setBtnText('Leave group');\n        }\n      } catch (error) {\n        console.error(\"Error fetching group data:\", error);\n      }\n    };\n    const fetchQuestions = async () => {\n      try {\n        const {\n          data\n        } = await publicFetch.get(`/group/${name}/question`);\n        setQuestions(data);\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n      }\n    };\n    const fetchQuestionsByTag = async () => {\n      try {\n        const {\n          data\n        } = await publicFetch.get(`/questions/${router.query.tag}`);\n        setQuestions(data);\n      } catch (error) {\n        console.error(\"Error fetching questions by tag:\", error);\n      }\n    };\n    if (router.query.tag) {\n      fetchQuestionsByTag();\n    } else {\n      fetchQuestions();\n    }\n    fetchGroupData();\n  }, [router.query.tag]);\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n      case 'Views':\n        return (a, b) => b.views - a.views;\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n      default:\n        break;\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Group \", valueGroup.inGroup)), __jsx(Layout, {\n    extra: true\n  }, __jsx(PageTitle, {\n    title: name,\n    askBtn: valueGroup.isUser || valueGroup.isAdmin,\n    adminBtn: valueGroup.isAdmin,\n    borderBottom: false\n  }), group && __jsx(\"div\", {\n    className: styles.buttonContainer\n  }, __jsx(\"button\", {\n    className: styles.btndatcauhoi,\n    onClick: handleJoin\n  }, btnText)), valueGroup.isUser || valueGroup.isAdmin ? __jsx(\"div\", null, __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Votes', 'Views', 'Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\"\n  }, __jsx(Spinner, null)), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(({\n    id,\n    votes,\n    answers,\n    views,\n    title,\n    text,\n    tags,\n    author,\n    created\n  }) => __jsx(QuestionWrapper, {\n    key: id\n  }, __jsx(QuestionStats, {\n    voteCount: votes.length,\n    answerCount: answers.length,\n    view: views\n  }), __jsx(QuestionSummary, {\n    id: id,\n    title: title,\n    tags: tags,\n    author: author,\n    createdTime: created\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: text\n    }\n  }))))) : __jsx(\"div\", {\n    className: styles.Thisisaprivategroup\n  }, \"This is a private group\")));\n};\nexport default GroupDetail;","map":null,"metadata":{},"sourceType":"module"}