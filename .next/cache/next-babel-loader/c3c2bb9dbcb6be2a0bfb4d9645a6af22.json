{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport { publicFetch } from '../../../util/fetcher';\nimport { GroupAuthContext } from '../../../store/groupauth';\nimport PageTitle from '../../page-title';\nimport SearchInput from '../../search-input';\nimport UserList from '../../user-list';\nimport UserItem from '../../user-list/user-item-group';\nimport styles from './usergroup.module.css';\nimport { Spinner } from '../../icons';\nconst UsersManage = () => {\n  const {\n    0: searchTerm,\n    1: setSearchTerm\n  } = useState(null);\n  const {\n    0: users,\n    1: setUsers\n  } = useState(null);\n  const {\n    0: waitList,\n    1: setWaitList\n  } = useState(null);\n  const {\n    0: listAdmin,\n    1: setListAdmin\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    valueGroup\n  } = useContext(GroupAuthContext);\n  const fetchListWait = () => {\n    if (searchTerm === null) {\n      const fetchUser = async () => {\n        const {\n          data\n        } = await publicFetch.get(`/group/${valueGroup.inGroup}/waitlistuser`);\n        setWaitList(data);\n      };\n      fetchUser();\n    }\n  };\n  const fetchAdminList = () => {\n    if (searchTerm === null) {\n      const fetchUser = async () => {\n        const {\n          data\n        } = await publicFetch.get(`/group/${valueGroup.inGroup}/adminlist`);\n        setListAdmin(data);\n      };\n      fetchUser();\n    }\n  };\n  const fetchListMember = searchTerm => {\n    if (searchTerm === null) {\n      const fetchUser = async () => {\n        const {\n          data\n        } = await publicFetch.get(`/group/${valueGroup.inGroup}/member`);\n        setUsers(data);\n      };\n      fetchUser();\n    } else {\n      const delayDebounceFn = setTimeout(async () => {\n        setLoading(true);\n        const {\n          data\n        } = await publicFetch.get(searchTerm ? `/users/${searchTerm}` : `/users`);\n        setUsers(data);\n        setLoading(false);\n      }, 500);\n      return () => clearTimeout(delayDebounceFn);\n    }\n  };\n  useEffect(() => {\n    fetchListWait();\n    fetchAdminList();\n    fetchListMember(searchTerm);\n  }, [searchTerm]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: styles.containerusergroup\n  }, __jsx(\"div\", {\n    className: styles.leftColumn\n  }, __jsx(PageTitle, {\n    title: \"Request to join group \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\",\n    borderBottom: false,\n    className: styles.pageTitle\n  }), !waitList && __jsx(\"div\", {\n    className: styles.loading\n  }, __jsx(Spinner, null)), waitList && __jsx(React.Fragment, null, __jsx(UserList, null, waitList === null || waitList === void 0 ? void 0 : waitList.map(({\n    username,\n    profilePhoto,\n    id\n  }) => __jsx(UserItem, {\n    key: id,\n    username: username,\n    profilePhoto: profilePhoto,\n    group: valueGroup.inGroup,\n    outGroup: true,\n    className: styles.userItem\n  }))), waitList.length == 0 && __jsx(\"p\", {\n    className: styles.notFound\n  }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0No request yet\")), __jsx(PageTitle, {\n    title: \"Member in group\",\n    borderBottom: false,\n    className: styles.pageTitle\n  }), __jsx(SearchInput, {\n    placeholder: \"Search by user\",\n    isLoading: loading,\n    autoFocus: true,\n    autoComplete: \"off\",\n    type: \"text\",\n    onChange: e => setSearchTerm(e.target.value),\n    className: styles.searchInput\n  }), !users && __jsx(\"div\", {\n    className: styles.loading\n  }, __jsx(Spinner, null)), users && __jsx(React.Fragment, null, __jsx(UserList, null, users === null || users === void 0 ? void 0 : users.map(({\n    username,\n    profilePhoto,\n    id\n  }) => __jsx(UserItem, {\n    key: id,\n    username: username,\n    profilePhoto: profilePhoto,\n    group: valueGroup.inGroup,\n    inGroup: true,\n    outGroup: false,\n    className: styles.userItem\n  }))), users.length == 0 && __jsx(\"p\", {\n    className: styles.notFound\n  }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0No users matched your search.\"))), valueGroup.isAuthor && __jsx(\"div\", {\n    className: styles.rightColumn\n  }, __jsx(PageTitle, {\n    title: \"List Admin\",\n    borderBottom: false,\n    className: styles.pageTitle\n  }), !listAdmin && __jsx(\"div\", {\n    className: styles.loading\n  }, __jsx(Spinner, null)), listAdmin && __jsx(React.Fragment, null, __jsx(UserList, null, listAdmin === null || listAdmin === void 0 ? void 0 : listAdmin.map(({\n    username,\n    profilePhoto,\n    id\n  }) => __jsx(UserItem, {\n    key: id,\n    username: username,\n    profilePhoto: profilePhoto,\n    group: valueGroup.inGroup,\n    inGroup: false,\n    outGroup: false,\n    admin: true,\n    className: styles.userItem\n  }))), listAdmin.length == 0 && __jsx(\"p\", {\n    className: styles.notFound\n  }, \"Add admin to your group.\")))));\n};\nexport default UsersManage;","map":null,"metadata":{},"sourceType":"module"}