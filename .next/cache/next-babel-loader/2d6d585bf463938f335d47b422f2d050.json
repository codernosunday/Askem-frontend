{"ast":null,"code":"var _jsxFileName = \"W:\\\\askem-project2\\\\client\\\\components\\\\admingroup-form\\\\waitlist\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { GroupAuthContext } from '../../../store/groupauth';\nimport { publicFetch } from '../../../util/fetcher';\nimport QuestionWrapper from '../../question/question-wrapper';\nimport QuestionStats from '../../question/question-stats';\nimport QuestionSummary from '../../question/question-summary';\nimport ButtonGroup from '../../button-group';\nimport { Spinner } from '../../icons';\nconst AdminFormGroupQuestion = ({\n  name\n}) => {\n  const router = useRouter();\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState(null);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('Votes');\n  const {\n    valueGroup,\n    setValueGroup\n  } = useContext(GroupAuthContext);\n  useEffect(() => {\n    try {\n      const fetchQuestion = async () => {\n        const {\n          data\n        } = await publicFetch.get(`/group/${name}/question`);\n        // const { data } = authAxios.post('/group/question', { name: name })\n        setQuestions(data);\n      };\n      const fetchQuestionByTag = async () => {\n        const {\n          data\n        } = await publicFetch.get(`/questions/${router.query.tag}`);\n        setQuestions(data);\n      };\n      if (router.query.tag) {\n        fetchQuestionByTag();\n      } else {\n        fetchQuestion();\n      }\n      setValueGroup(name);\n    } catch (error) {}\n  }, [router.query.tag]);\n  const handleSorting = () => {\n    switch (sortType) {\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n      default:\n        break;\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(ButtonGroup, {\n    borderBottom: true,\n    buttons: ['Newest', 'Oldest'],\n    selected: sortType,\n    setSelected: setSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), !questions && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  })), questions === null || questions === void 0 ? void 0 : questions.sort(handleSorting()).map(({\n    id,\n    votes,\n    answers,\n    views,\n    title,\n    text,\n    tags,\n    author,\n    created\n  }) => __jsx(QuestionWrapper, {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, __jsx(QuestionStats, {\n    voteCount: votes.length,\n    answerCount: answers.length,\n    view: views,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }), __jsx(QuestionSummary, {\n    id: id,\n    title: title,\n    tags: tags,\n    author: author,\n    createdTime: created,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: text\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 33\n    }\n  })), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 29\n    }\n  }, \"delete\"))));\n};\nexport default AdminFormGroupQuestion;","map":{"version":3,"names":["React","useEffect","useState","useContext","useRouter","GroupAuthContext","publicFetch","QuestionWrapper","QuestionStats","QuestionSummary","ButtonGroup","Spinner","AdminFormGroupQuestion","name","router","questions","setQuestions","sortType","setSortType","valueGroup","setValueGroup","fetchQuestion","data","get","fetchQuestionByTag","query","tag","error","handleSorting","a","b","Date","created","__jsx","Fragment","borderBottom","buttons","selected","setSelected","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","sort","map","id","votes","answers","views","title","text","tags","author","key","voteCount","length","answerCount","view","createdTime","dangerouslySetInnerHTML","__html"],"sources":["W:/askem-project2/client/components/admingroup-form/waitlist/index.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { GroupAuthContext } from '../../../store/groupauth'\r\nimport { publicFetch } from '../../../util/fetcher'\r\nimport QuestionWrapper from '../../question/question-wrapper'\r\nimport QuestionStats from '../../question/question-stats'\r\nimport QuestionSummary from '../../question/question-summary'\r\nimport ButtonGroup from '../../button-group'\r\nimport { Spinner } from '../../icons'\r\nconst AdminFormGroupQuestion = ({ name }) => {\r\n    const router = useRouter()\r\n    const [questions, setQuestions] = useState(null)\r\n    const [sortType, setSortType] = useState('Votes')\r\n    const { valueGroup, setValueGroup } = useContext(GroupAuthContext)\r\n    useEffect(() => {\r\n        try {\r\n            const fetchQuestion = async () => {\r\n                const { data } = await publicFetch.get(`/group/${name}/question`)\r\n                // const { data } = authAxios.post('/group/question', { name: name })\r\n                setQuestions(data)\r\n            }\r\n            const fetchQuestionByTag = async () => {\r\n                const { data } = await publicFetch.get(`/questions/${router.query.tag}`)\r\n                setQuestions(data)\r\n            }\r\n\r\n            if (router.query.tag) {\r\n                fetchQuestionByTag()\r\n            } else {\r\n                fetchQuestion()\r\n            }\r\n            setValueGroup(name)\r\n        }\r\n        catch (error) { }\r\n    }, [router.query.tag])\r\n    const handleSorting = () => {\r\n        switch (sortType) {\r\n            case 'Newest':\r\n                return (a, b) => new Date(b.created) - new Date(a.created)\r\n            case 'Oldest':\r\n                return (a, b) => new Date(a.created) - new Date(b.created)\r\n            default:\r\n                break\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <ButtonGroup\r\n                borderBottom\r\n                buttons={['Newest', 'Oldest']}\r\n                selected={sortType}\r\n                setSelected={setSortType}\r\n            />\r\n            {!questions && (\r\n                <div className=\"loading\">\r\n                    <Spinner />\r\n                </div>\r\n            )}\r\n\r\n            {questions\r\n                ?.sort(handleSorting())\r\n                .map(\r\n                    ({\r\n                        id,\r\n                        votes,\r\n                        answers,\r\n                        views,\r\n                        title,\r\n                        text,\r\n                        tags,\r\n                        author,\r\n                        created\r\n                    }) => (\r\n                        <QuestionWrapper key={id}>\r\n                            <QuestionStats\r\n                                voteCount={votes.length}\r\n                                answerCount={answers.length}\r\n                                view={views}\r\n                            />\r\n                            <QuestionSummary\r\n                                id={id}\r\n                                title={title}\r\n                                tags={tags}\r\n                                author={author}\r\n                                createdTime={created}\r\n                            >\r\n                                <div dangerouslySetInnerHTML={{ __html: text }} />\r\n                            </QuestionSummary>\r\n                            <p>delete</p>\r\n                        </QuestionWrapper>\r\n                    )\r\n                )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminFormGroupQuestion"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}